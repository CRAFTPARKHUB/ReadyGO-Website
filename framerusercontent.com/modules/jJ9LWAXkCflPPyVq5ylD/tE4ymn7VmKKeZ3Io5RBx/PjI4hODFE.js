// Generated by Framer (ce6e1ae)
import {
    addPropertyControls as e,
    ControlType as t,
    QueryCache as l,
    QueryEngine as i
} from "framer";
import {
    DatabaseCollection as r
} from "./PjI4hODFE-0.js";
import {
    resolveRichText as a
} from "./PjI4hODFE-1.js";
import {
    resolveRichTextCz as n
} from "./PjI4hODFE-3.js";
let o = {
        HrujyAvCq: {
            isNullable: !0,
            type: t.String
        },
        id: {
            isNullable: !1,
            type: t.String
        },
        JIXZXkrm_: {
            isNullable: !0,
            type: t.String
        },
        mVYY4vX0k: {
            isNullable: !0,
            type: t.String
        },
        nextItemId: {
            isNullable: !0,
            type: t.String
        },
        previousItemId: {
            isNullable: !0,
            type: t.String
        },
        tqWBbHPE8: {
            isNullable: !0,
            type: t.Date
        },
        ZFvh3qbmK: {
            isNullable: !0,
            type: t.RichText
        }
    },
    u = [],
    m = e => {
        let t = u[e];
        if (t) return t().then(e => e.default);
    },
    p = new i,
    c = new l(p),
    y = {
        collectionByLocaleId: {
            default: new r({
                chunks: [new URL("./PjI4hODFE-chunk-default-0.framercms",
                    import.meta.url).href.replace("/modules/", "/cms/")],
                indexes: [],
                resolveRichText: a,
                resolveVectorSetItem: m,
                schema: o
            }),
            TeF2PH4jk: new r({
                chunks: [new URL("./PjI4hODFE-chunk-TeF2PH4jk-0.framercms",
                    import.meta.url).href.replace("/modules/", "/cms/")],
                indexes: [],
                resolveRichText: n,
                resolveVectorSetItem: m,
                schema: o
            })
        },
        displayName: "Changelog"
    };
export default y;
e(y, {
    HrujyAvCq: {
        defaultValue: "",
        title: "Time",
        type: t.String
    },
    tqWBbHPE8: {
        title: "Date",
        type: t.Date
    },
    mVYY4vX0k: {
        title: "Slug",
        type: t.String
    },
    JIXZXkrm_: {
        defaultValue: "",
        preventLocalization: !0,
        title: "Title",
        type: t.String
    },
    ZFvh3qbmK: {
        defaultValue: "",
        title: "Content",
        type: t.RichText
    },
    previousItemId: {
        dataIdentifier: "local-module:collection/PjI4hODFE:default",
        title: "Previous",
        type: t.CollectionReference
    },
    nextItemId: {
        dataIdentifier: "local-module:collection/PjI4hODFE:default",
        title: "Next",
        type: t.CollectionReference
    }
});
export const enumToDisplayNameFunctions = {};
export const utils = {
    async getSlugByRecordId(e, t) {
        let [l] = await c.get({
            from: {
                data: y,
                type: "Collection"
            },
            limit: {
                type: "LiteralValue",
                value: 1
            },
            select: [{
                name: "mVYY4vX0k",
                type: "Identifier"
            }],
            where: {
                left: {
                    name: "id",
                    type: "Identifier"
                },
                operator: "==",
                right: {
                    type: "LiteralValue",
                    value: e
                },
                type: "BinaryOperation"
            }
        }, t).readAsync();
        return l ? .mVYY4vX0k;
    },
    async getRecordIdBySlug(e, t) {
        let [l] = await c.get({
            from: {
                data: y,
                type: "Collection"
            },
            limit: {
                type: "LiteralValue",
                value: 1
            },
            select: [{
                name: "id",
                type: "Identifier"
            }],
            where: {
                left: {
                    name: "mVYY4vX0k",
                    type: "Identifier"
                },
                operator: "==",
                right: {
                    type: "LiteralValue",
                    value: e
                },
                type: "BinaryOperation"
            }
        }, t).readAsync();
        return l ? .id;
    }
};
export const __FramerMetadata__ = {
    "exports": {
        "enumToDisplayNameFunctions": {
            "type": "variable",
            "annotations": {
                "framerContractVersion": "1"
            }
        },
        "utils": {
            "type": "variable",
            "annotations": {
                "framerContractVersion": "1"
            }
        },
        "default": {
            "type": "data",
            "name": "data",
            "annotations": {
                "framerData": "",
                "framerCollectionUtils": "1",
                "framerCollectionId": "PjI4hODFE",
                "framerAutoSizeImages": "true",
                "framerRecordIdKey": "id",
                "framerContractVersion": "1",
                "framerEnumToDisplayNameUtils": "2",
                "framerSlug": "mVYY4vX0k",
                "framerColorSyntax": "false"
            }
        },
        "__FramerMetadata__": {
            "type": "variable"
        }
    }
}